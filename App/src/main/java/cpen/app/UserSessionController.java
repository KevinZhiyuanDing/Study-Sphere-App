package cpen.app;

import cpen.ADT.Course;
import cpen.ADT.DateTime;
import cpen.ADT.DateTimeFormat;
import cpen.ADT.Room;
import cpen.ADT.Session;
import cpen.ADT.User;
import cpen.network.Network;
import cpen.network.Requests.GetRoomsRequest;
import cpen.network.Requests.GetSessionsRequest;
import cpen.network.Responses.GetRoomsResponse;
import cpen.network.Responses.GetSessionsResponse;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.stage.Stage;

import java.util.Arrays;
import java.util.List;

public class UserSessionController {
    public Button newSessionBtn;
    @FXML
    private Button refreshButton;
    @FXML
    private TableView<Session> existingTableView;
    @FXML
    private TableColumn<Session, String> hostCol;
    @FXML
    private TableColumn<Session, String> courseCodeCol;
    @FXML
    private TableColumn<Session, String> roomCol;
    @FXML
    private TableColumn<Session, String> timeCol;
    @FXML
    private TableColumn<Session, Void> requestCol;


    /**
     * Initializes the UserSessionController.
     */
    @FXML
    protected void initialize() {

    }

    /**
     * Converts a list of session objects into an observable list format.
     *
     * @param listOfSession The list of Session objects.
     * @return An ObservableList containing the Sessions provided.
     */
    @FXML
    ObservableList<Session> getSessionData(List<Session> listOfSession) {
        return FXCollections.observableArrayList(listOfSession);
    }

    /**
     * When the refresh button is clicked, sends a request to retrieve the sessions of the current user
     *
     * @param actionEvent the ActionEvent generated by the user click
     */
    @FXML
    protected void onRefreshClick(javafx.event.ActionEvent actionEvent) {
        Network connection = DataSingleton.getInstance().getConnection();

        User user = DataSingleton.getInstance().getUser();

        if (connection.isConnected()) {
            connection.sendRequest(new GetSessionsRequest(user));

            boolean connectionSuccess = true;
            long startTime = System.currentTimeMillis();
            while (!connection.responseAvailable()) {
                long presentTime = System.currentTimeMillis();
                if (presentTime - startTime >= 5000) {
                    connectionSuccess = false;
                    break;
                }
            }
            if (connectionSuccess) {
                String str = connection.receiveResponse();
                GetSessionsResponse response = new GetSessionsResponse(str);
                updateTable(response.getSessionsList());
            }
        }
    }

    /**
     * Updates the table view with a list of session data.
     *
     * @param listOfSessions List of Session to be displayed in the cells
     */
    private void updateTable(List<Session> listOfSessions) {
        // Table View
        requestCol.setCellFactory(col -> new TableCell<Session, Void>() {
            private final Button button = new Button("See Requests");

            {
                button.setOnAction(evt -> {
                    Session thisSession = getTableRow().getItem();
                    //debug
                    if (thisSession != null) {
                        System.out.println("Checkout " + thisSession.getHost() + "'s study session.");
                    }
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null); // Don't display anything if the row is empty
                } else {
                    setGraphic(button); // Set the button in the cell
                }
            }
        });

        hostCol.setCellValueFactory(
                cellData -> new SimpleStringProperty(cellData.getValue().getHost().getUsername()));
        courseCodeCol.setCellValueFactory(
                cellData -> new SimpleStringProperty(cellData.getValue().getCourse()));
        roomCol.setCellValueFactory(
                cellData -> new SimpleStringProperty(cellData.getValue().getBuilding() + " "
                        + cellData.getValue().getRoom()));
        timeCol.setCellValueFactory(cellData -> new SimpleStringProperty(
                cellData.getValue().getStartTime().getDateString(DateTimeFormat.YYYY_MM_DD) + " ~ "
                        + cellData.getValue().getStartTime().getHourString() + ":00 - " + cellData.getValue().getEndTime().getHourString()+ ":00"));
        existingTableView.setItems(getSessionData(listOfSessions));
    }

    public void onNewSession(ActionEvent actionEvent) {

    }
}